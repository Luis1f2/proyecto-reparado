import { IUserRepository } from "../domain/User_repository";
import { LoginUserDTO } from "./UserDto";
import bcrypt from "bcrypt";
import jwt from 'jsonwebtoken';

const JWT_SECRET= "mysecretkey";

export class LoginUser {
  constructor(private userRepository: IUserRepository) {}

  async execute({ identifier, contrase침a }: LoginUserDTO) {
    console.log("游리 Iniciando login con:", identifier);

    const user = await this.userRepository.viewByEmailOrUsername(identifier);

    if (!user) {
      console.warn("游댮 Usuario no encontrado:", identifier);
      throw new Error("Invalid username/email or password");
    }

    console.log("游댯 Usuario encontrado:", user.email);
    console.log("游댯 Comparando contrase침as...");
    console.log("游댯 Contrase침a recibida:", contrase침a);
    console.log("游댯 Hash almacenado:", user.contrase침a);
    
   
    if (!user.contrase침a.startsWith('$2b$')) {
      console.error("游댮 Error: El hash almacenado no tiene el formato correcto");
      throw new Error("Invalid password format");
    }
    
    const isPasswordValid = await bcrypt.compare(contrase침a, user.contrase침a);
    console.log("游댯 Resultado de la comparaci칩n:", isPasswordValid);

    if (!isPasswordValid) {
      console.warn("游댮 Contrase침a incorrecta para usuario:", user.email);
      throw new Error("Invalid username/email or password");
    }

    const token = jwt.sign(
      { id_usuario: user.id_usuario, email: user.email, nombre: user.nombre },
      JWT_SECRET,
      { expiresIn: "1h" }
    );

    console.log("游릭 Login exitoso:", user.email);

    return { token, message: "Login successful" };
  }
}
